# Sample entities.yaml for Blog domain
# Demonstrates complex entity relationships and mixin combinations

entities:
  - name: "User"
    description: "Blog user who can create posts and comments"
    table_name: "users"
    mixins: [ "Timestamped" ]
    fields:
      - name: "username"
        type: "str"
        required: true
        unique: true
        index: true
        description: "Unique username"
        sqlmodel_field: "Field(index=True, unique=True)"

      - name: "email"
        type: "EmailStr"
        required: true
        unique: true
        description: "User email"
        sqlmodel_field: "Field(unique=True)"

      - name: "full_name"
        type: "str"
        required: true
        description: "Display name"

      - name: "bio"
        type: "Optional[str]"
        required: false
        description: "User bio"

  - name: "Post"
    description: "Blog post with content and metadata"
    table_name: "posts"
    mixins: [ "Timestamped", "Authored", "Published" ]
    fields:
      - name: "title"
        type: "str"
        required: true
        index: true
        description: "Post title"
        sqlmodel_field: "Field(index=True)"

      - name: "slug"
        type: "str"
        required: true
        unique: true
        index: true
        description: "URL-friendly identifier"
        sqlmodel_field: "Field(index=True, unique=True)"

      - name: "content"
        type: "str"
        required: true
        description: "Post content in markdown"

      - name: "excerpt"
        type: "Optional[str]"
        required: false
        description: "Short summary"

      - name: "view_count"
        type: "int"
        required: true
        default: "0"
        description: "Number of views"
        sqlmodel_field: "Field(default=0, ge=0)"
    
    relationships:
      - entity: "User"
        type: "many_to_one"
        back_populates: "posts"
        foreign_key: "users.id"

      - entity: "Comment"
        type: "one_to_many"
        back_populates: "post"

      - entity: "Tag"
        type: "many_to_many"
        back_populates: "posts"

  - name: "Comment"
    description: "User comment on blog posts"
    table_name: "comments"
    mixins: [ "Timestamped", "Authored" ]
    fields:
      - name: "content"
        type: "str"
        required: true
        description: "Comment content"

      - name: "approved"
        type: "bool"
        required: true
        default: "false"
        description: "Moderation status"
        sqlmodel_field: "Field(default=False)"

      - name: "post_id"
        type: "int"
        required: true
        description: "Post reference"
        sqlmodel_field: "Field(foreign_key='posts.id')"
    
    relationships:
      - entity: "Post"
        type: "many_to_one"
        back_populates: "comments"
        foreign_key: "posts.id"

      - entity: "User"
        type: "many_to_one"
        back_populates: "comments"
        foreign_key: "users.id"

  - name: "Tag"
    description: "Content categorization tags"
    table_name: "tags"
    mixins: [ "Timestamped" ]
    fields:
      - name: "name"
        type: "str"
        required: true
        unique: true
        index: true
        description: "Tag name"
        sqlmodel_field: "Field(index=True, unique=True)"

      - name: "slug"
        type: "str"
        required: true
        unique: true
        index: true
        description: "URL-friendly tag identifier"
        sqlmodel_field: "Field(index=True, unique=True)"

      - name: "description"
        type: "Optional[str]"
        required: false
        description: "Tag description"

      - name: "color"
        type: "str"
        required: true
        default: "'#666666'"
        description: "Tag display color"
        sqlmodel_field: "Field(default='#666666')"
    
    relationships:
      - entity: "Post"
        type: "many_to_many"
        back_populates: "tags"

# Comprehensive API endpoints
endpoints:
  # User endpoints
  - method: "POST"
    path: "/users/"
    operation: "create_user"
    description: "Create blog user"

  - method: "GET"
    path: "/users/{id}"
    operation: "get_user"
    description: "Get user details"
  
  # Post endpoints
  - method: "POST"
    path: "/posts/"
    operation: "create_post"
    description: "Create new post"

  - method: "GET"
    path: "/posts/{id}"
    operation: "get_post"
    description: "Get post by ID"

  - method: "GET"
    path: "/posts/"
    operation: "list_posts"
    description: "List posts with filters"

  - method: "GET"
    path: "/posts/published"
    operation: "list_published_posts"
    description: "List published posts only"

  - method: "GET"
    path: "/posts/by-tag/{tag_slug}"
    operation: "list_posts_by_tag"
    description: "Get posts by tag"
  
  # Comment endpoints  
  - method: "POST"
    path: "/posts/{post_id}/comments/"
    operation: "create_comment"
    description: "Add comment to post"

  - method: "GET"
    path: "/posts/{post_id}/comments/"
    operation: "list_post_comments"
    description: "Get post comments"

  - method: "PUT"
    path: "/comments/{id}/approve"
    operation: "approve_comment"
    description: "Approve comment"
  
  # Tag endpoints
  - method: "POST"
    path: "/tags/"
    operation: "create_tag"
    description: "Create new tag"

  - method: "GET"
    path: "/tags/"
    operation: "list_tags"
    description: "List all tags"

metadata:
  entities_count: 4
  has_relationships: true
  relationship_complexity: "high"
  features: [ "many_to_many", "moderation", "publishing" ]