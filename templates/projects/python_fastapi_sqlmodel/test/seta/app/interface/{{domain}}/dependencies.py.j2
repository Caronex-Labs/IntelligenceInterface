"""
{{ entity_name }} Interface Layer Dependencies
This module provides dependency injection functions for the {{ entity_name }} interface layer,
ensuring proper dependency resolution and lifecycle management.
Generated from: app/interface/{{ domain }}/dependencies.py.j2
Configuration: app/interface/{{ domain }}/interface.yaml
"""
import logging
from typing import Dict, Any, Optional, Annotated

from app.repository.{{ domain }}.repository import {{ entity_name }}Repository
from app.repository.{{ domain }}.protocols import {{ entity_name }}RepositoryProtocol
from app.usecase.{{ domain }}.usecase import {{ entity_name }}UseCase
# @pyhex:begin:custom:imports
# Add custom imports here
# @pyhex:end:custom:imports
from app.usecase.{{ domain }}.protocols import {{ entity_name }}UseCaseProtocol
from fastapi import Depends, HTTPException, status, Request, Header
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

from .protocols import (
    AuthenticationProtocol,
    AuthorizationProtocol,
    MiddlewareProtocol,
    RateLimitingProtocol,
    CachingProtocol,
)

logger = logging.getLogger(__name__)
# Security scheme
security = HTTPBearer(auto_error=False)


# Core dependency providers
async def get_{{ domain }}_repository() -> {{ entity_name }}RepositoryProtocol:
    """
    Get {{ entity_name }} repository instance.
    This dependency provides a configured repository instance
    for {{ entity_name }} data operations.
    """
    # @pyhex:begin:custom:get_
    {{ domain }}  _repository
    # Initialize repository with database session
    # This is a simplified implementation - customize based on your database setup
    return {{ entity_name }}Repository()
    # @pyhex:end:custom:get_
    {{ domain }}  _repository


async def get_{{ domain }}_usecase(
        repository: {{ entity_name }}RepositoryProtocol = Depends(get_{{ domain }}_repository)
) -> {{ entity_name }}UseCaseProtocol:
    """
    Get {{ entity_name }} use case instance.
    This dependency provides a configured use case instance
    with proper repository injection.
    """
    # @pyhex:begin:custom:get_
    {{ domain }}  _usecase
    # Initialize use case with dependencies
    # This is a simplified implementation - customize based on your architecture
    from app.usecase.{{ domain }}.usecase import {{ entity_name }}BusinessRules

    business_rules = {{ entity_name }}BusinessRules(repository)

    # Mock event publisher - replace with actual implementation
    class MockEventPublisher:
        async def publish_{{ domain }}_created(self, entity, context): pass

        async def publish_{{ domain }}_updated(self, entity, update_data, context): pass

        async def publish_{{ domain }}_deleted(self, entity_id, context): pass

    event_publisher = MockEventPublisher()
    # Mock services - replace with actual implementations
    validation_service = None
    audit_service = None
    return {{ entity_name }}UseCase(
        {{ domain }}_repository=repository,
        business_rules=business_rules,
        event_publisher=event_publisher,
        validation_service=validation_service,
        audit_service=audit_service,
    )
    # @pyhex:end:custom:get_
    {{ domain }}  _usecase


# Authentication dependencies
async def get_current_user(
        request: Request,
        credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> Optional[Dict[str, Any]]:
    """
    Get current authenticated user.
    This dependency extracts and validates the current user
    from the request authentication token.
    """
    # @pyhex:begin:custom:get_current_user
    {% if auth and auth.enabled -%}
    if not credentials:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authentication credentials required",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    token = credentials.credentials
    
    # JWT token validation implementation
    try:
        import jwt
        import os
        from datetime import datetime
        
        # Get JWT secret from environment
        jwt_secret = os.getenv("JWT_SECRET")
        if not jwt_secret:
            logger.error("JWT_SECRET environment variable not set")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Authentication configuration error"
            )
        
        # Decode and validate JWT token
        try:
            payload = jwt.decode(token, jwt_secret, algorithms=["HS256"])
        except jwt.ExpiredSignatureError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token has expired",
                headers={"WWW-Authenticate": "Bearer"},
            )
        except jwt.InvalidTokenError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        # Extract user information from token
        user_id = payload.get("sub")
        if not user_id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token: missing user ID",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        # TODO: Implement database user lookup
        # For now, return user info from token
        user = {
            "id": user_id,
            "email": payload.get("email", "unknown@example.com"),
            "username": payload.get("username", "unknown"),
            "roles": payload.get("roles", ["user"]),
            "permissions": payload.get("permissions", ["read"])
        }
        
        return user
        
    except HTTPException:
        # Re-raise HTTP exceptions
        raise
    except Exception as e:
        logger.warning(f"Authentication failed: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    {% else -%}
    # Authentication disabled - return None for optional auth
    if not credentials:
        return None
    
    # Basic token validation for development
    token = credentials.credentials
    if not token or len(token) < 10:
        return None
    
    # Development mode - return mock user
    return {
        "id": "dev-user-id",
        "username": "dev_user",
        "email": "dev@example.com",
        "roles": ["user"],
        "permissions": ["read", "create", "update", "delete", "list"]
    }
    {% endif -%}


# @pyhex:end:custom:get_current_user
def require_{{ domain }}_permission(permission: str):
    """
    Create a dependency that requires specific {{ domain }} permission.
    Args:
        permission: Required permission (create, read, update, delete, list)
    Returns:
        Dependency function that validates permission
    """

    async def check_permission(
            current_user: Dict[str, Any] = Depends(get_current_user)
    ) -> None:
        """Check if current user has required permission."""
        # @pyhex:begin:custom:check_permission
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Authentication required"
            )
        user_permissions = current_user.get("permissions", [])
        user_roles = current_user.get("roles", [])
        # Check direct permission
        if permission in user_permissions:
            return
        # Check role-based permissions
        admin_roles = ["admin", "{{ domain }}_admin", "super_admin"]
        if any(role in admin_roles for role in user_roles):
            return
        # Permission denied
        logger.warning(
            f"Permission denied for user {current_user.get('id')}: {permission}",
            extra={"user_id": current_user.get("id"), "permission": permission}
        )
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail=f"Insufficient permissions: {permission} required"
        )
        # @pyhex:end:custom:check_permission

    return check_permission


def require_role(role: str):
    """
    Create a dependency that requires specific role.
    Args:
        role: Required role
    Returns:
        Dependency function that validates role
    """

    async def check_role(
            current_user: Dict[str, Any] = Depends(get_current_user)
    ) -> None:
        """Check if current user has required role."""
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Authentication required"
            )
        user_roles = current_user.get("roles", [])
        if role not in user_roles:
            logger.warning(
                f"Role check failed for user {current_user.get('id')}: {role}",
                extra={"user_id": current_user.get("id"), "role": role}
            )
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"Role required: {role}"
            )

    return check_role


# Rate limiting dependencies
async def rate_limit_dependency(
        request: Request,
        x_forwarded_for: Annotated[str | None, Header()] = None,
) -> None:
    """
    Apply rate limiting to requests.
    This dependency implements request rate limiting based on
    client IP address or user identification.
    """

    # @pyhex:begin:custom:rate_limit_dependency
    # Get client identifier
    client_ip = x_forwarded_for or request.client.host if request.client else "unknown"
    # TODO: Implement actual rate limiting logic
    # rate_limiter = get_rate_limiter()
    # if not await rate_limiter.check_rate_limit(client_ip, limit=100, window=60):
    #     raise HTTPException(
    #         status_code=status.HTTP_429_TOO_MANY_REQUESTS,
    #         detail="Rate limit exceeded"
    #     )
    logger.debug(f"Rate limit check passed for {client_ip}")
    # @pyhex:end:custom:rate_limit_dependency


# Caching dependencies
async def cache_dependency(request: Request) -> Optional[Dict[str, Any]]:
    """
    Check for cached response.
    This dependency checks if a cached response exists
    for the current request.
    """
    # @pyhex:begin:custom:cache_dependency
    # TODO: Implement actual caching logic
    # cache_key = generate_cache_key(request)
    # cached_response = await get_from_cache(cache_key)
    # return cached_response
    return None  # No cached response


# @pyhex:end:custom:cache_dependency
# Validation dependencies
async def validate_request_headers(
        request: Request,
        content_type: Annotated[str | None, Header()] = None,
        accept: Annotated[str | None, Header()] = None,
) -> None:
    """
    Validate request headers.
    This dependency validates that required headers
    are present and have acceptable values.
    """
    # @pyhex:begin:custom:validate_request_headers
    # Validate content type for POST/PUT requests
    if request.method in ["POST", "PUT", "PATCH"]:
        if not content_type or not content_type.startswith("application/json"):
            logger.warning(f"Invalid content type: {content_type}")
            # Note: FastAPI handles this automatically, but you can add custom validation
    # Validate accept header
    if accept and "application/json" not in accept:
        logger.warning(f"Unsupported accept header: {accept}")
        # Note: FastAPI handles this automatically, but you can add custom validation
    logger.debug("Request headers validation passed")


# @pyhex:end:custom:validate_request_headers
# Metrics dependencies
async def metrics_dependency(request: Request) -> None:
    """
    Record request metrics.
    This dependency records metrics for monitoring
    and analytics purposes.
    """
    # @pyhex:begin:custom:metrics_dependency
    # TODO: Implement actual metrics recording
    # metrics_recorder = get_metrics_recorder()
    # await metrics_recorder.record_request_start(request)
    logger.debug(f"Request metrics recorded for {request.url}")


# @pyhex:end:custom:metrics_dependency
# Common dependencies combination
def get_common_dependencies():
    """
    Get common dependencies for all endpoints.
    Returns:
    List of common dependencies
    """
    return [
        Depends(validate_request_headers),
        Depends(rate_limit_dependency),
        Depends(metrics_dependency),
    ]
# @pyhex:begin:custom:dependencies
# Add custom dependency functions here
# @pyhex:end:custom:dependencies
