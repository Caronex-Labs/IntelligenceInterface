"""
FastAPI Application Factory - {{ app_name or 'Application' }}
This module creates and configures the FastAPI application with all routes,
middleware, and dependencies properly initialized.
Generated from: app/main.py.j2
"""

import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware

# Application configuration
from .config import get_settings, Settings
from .database import create_database_engine, get_database_session
# Domain routers
{% for domain in domains %}
from .interface.{{ domain.name }}.router import router as {{ domain.name }}_router
{% endfor %}
# Custom exception handlers
from .interface.exceptions import (
    validation_exception_handler,
    not_found_exception_handler,
    internal_error_exception_handler,
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager for startup and shutdown events."""
    # Startup
    logger.info("Starting {{ app_name or 'FastAPI Application' }}")
    # Initialize database
    settings = get_settings()
    engine = create_database_engine(settings.database_url)
    # Store engine in app state for access in dependencies
    app.state.database_engine = engine
    logger.info("Database connection established")
    logger.info("Application startup complete")
    yield
    # Shutdown
    logger.info("Shutting down {{ app_name or 'FastAPI Application' }}")
    # Close database connections
    if hasattr(app.state, 'database_engine'):
        app.state.database_engine.dispose()
    logger.info("Database connections closed")
    logger.info("Application shutdown complete")


def create_application() -> FastAPI:
    """
    Create and configure FastAPI application.
    
    Returns:
        Configured FastAPI application instance
    """
    settings = get_settings()
    
    # Create FastAPI application
    app = FastAPI(
        title="{{ app_info.title or app_name or 'FastAPI Application' }}",
        description="{{ app_info.description or 'Generated FastAPI application with SQLModel' }}",
        version="{{ app_info.version or '1.0.0' }}",
        openapi_url="/api/openapi.json" if settings.environment != "production" else None,
        docs_url="/docs" if settings.environment != "production" else None,
        redoc_url="/redoc" if settings.environment != "production" else None,
        lifespan=lifespan,
    )
    
    # Add middleware
    setup_middleware(app, settings)
    # Add routes
    setup_routes(app)
    # Add exception handlers
    setup_exception_handlers(app)
    # Setup logging
    setup_logging(settings)
    
    return app


def setup_middleware(app: FastAPI, settings: Settings) -> None:
    """Configure application middleware."""
    # CORS middleware
    if hasattr(settings, 'cors_enabled') and settings.cors_enabled:
        app.add_middleware(
            CORSMiddleware,
            allow_origins=getattr(settings, 'cors_origins', ["*"]),
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    
    # Compression middleware
    if hasattr(settings, 'compression_enabled') and settings.compression_enabled:
        app.add_middleware(GZipMiddleware, minimum_size=1000)

    # Custom middleware for request logging
    @app.middleware("http")
    async def log_requests(request, call_next):
        """Log all HTTP requests."""
        import time
        
        start_time = time.time()
        # Process request
        response = await call_next(request)
        # Log request details
        process_time = time.time() - start_time
        logger.info(
            f"{request.method} {request.url.path} - "
            f"Status: {response.status_code} - "
            f"Time: {process_time:.3f}s"
        )
        return response


def setup_routes(app: FastAPI) -> None:
    """Configure application routes."""
    # Health check endpoint
    @app.get("/health", tags=["system"])
    async def health_check():
        """Comprehensive application health check for monitoring and container orchestration."""
        from datetime import datetime
        
        try:
            import psutil
        except ImportError:
            psutil = None
            
        try:
            current_time = datetime.utcnow()
            settings = get_settings()
            
            # Basic system checks
            if psutil:
                memory_info = psutil.virtual_memory()
                disk_info = psutil.disk_usage('/')
                memory_percent = round(memory_info.percent, 1)
                disk_percent = round(disk_info.percent, 1)
            else:
                memory_percent = 0
                disk_percent = 0
                
            # Database connectivity check
            db_status = "healthy"
            try:
                # This would perform actual DB connectivity check
                # engine = app.state.database_engine
                # with engine.connect() as conn:
                #     conn.execute("SELECT 1")
                pass
            except Exception:
                db_status = "unhealthy"
                
            # Determine overall status
            overall_status = "healthy"
            if memory_percent > 90 or disk_percent > 90 or db_status != "healthy":
                overall_status = "degraded"
                
            health_response = {
                "status": overall_status,
                "application": "{{ app_name or 'FastAPI Application' }}",
                "version": "{{ app_info.version or '1.0.0' }}",
                "timestamp": current_time.isoformat(),
                "environment": settings.environment,
                "checks": {
                    "database": db_status,
                    "memory_usage_percent": memory_percent,
                    "disk_usage_percent": disk_percent,
                    "uptime": "available",  # Could implement actual uptime tracking
                },
                "container_mode": getattr(settings, 'container_mode', False)
            }
            return health_response
        except Exception as e:
            # Health checks should be resilient and not fail the service
            return {
                "status": "degraded",
                "application": "{{ app_name or 'FastAPI Application' }}",
                "version": "{{ app_info.version or '1.0.0' }}",
                "timestamp": datetime.utcnow().isoformat(),
                "error": "Health check partially failed"
            }


    # Root endpoint
    @app.get("/", tags=["system"])
    async def root():
        """Application root endpoint."""
        return {
            "message": "Welcome to {{ app_info.title or app_name or 'FastAPI Application' }}",
            "version": "{{ app_info.version or '1.0.0' }}",
            "docs": "/docs",
            "health": "/health",
        }
    
    # Include domain routers
{% for domain in domains %}
    app.include_router(
        {{ domain.name }}_router,
        prefix="/api/v1",
        tags=["{{ domain.name }}"]
    )
{% endfor %}

def setup_exception_handlers(app: FastAPI) -> None:
    """Configure application exception handlers."""
    app.add_exception_handler(HTTPException, not_found_exception_handler)
    app.add_exception_handler(ValueError, validation_exception_handler)
    app.add_exception_handler(Exception, internal_error_exception_handler)


def setup_logging(settings: Settings) -> None:
    """Configure application logging."""
    log_level = getattr(settings, 'log_level', 'INFO').upper()
    log_to_file = getattr(settings, 'log_to_file', False)
    
    logging.basicConfig(
        level=getattr(logging, log_level),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("app.log") if log_to_file else logging.NullHandler(),
        ]
    )
# Create application instance
app = create_application()

if __name__ == "__main__":
    import uvicorn
    
    settings = get_settings()
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.environment == "development",
        log_level=settings.log_level.lower(),
    )
