"""
Database Configuration and Session Management - {{ app_name or 'Application' }}
This module handles database connection, session management, and provides
database utilities for the application.
Generated from: app/database.py.j2
"""
import logging
from contextlib import asynccontextmanager
from typing import Generator
from typing import Optional

from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from sqlalchemy.orm import Session
from sqlalchemy.orm import sessionmaker
from sqlmodel import SQLModel
from sqlmodel import create_engine as create_sqlmodel_engine

from .config import get_settings

logger = logging.getLogger(__name__)
# Global database engine
_engine: Optional[object] = None
_async_engine: Optional[object] = None
_session_factory: Optional[sessionmaker] = None
_async_session_factory: Optional[async_sessionmaker] = None


def create_database_engine(database_url: str, echo: bool = False):
    """
    Create database engine based on the database URL.
    Args:
    database_url: Database connection URL
    echo: Whether to echo SQL statements
    Returns:
    SQLAlchemy engine instance
    """

    settings = get_settings()
    # Engine configuration
    engine_kwargs = {
        "echo": echo or settings.database_echo,
    }
    # Add connection pool settings for non-SQLite databases
    if not database_url.startswith("sqlite"):
        engine_kwargs.update({
            "pool_size": settings.database_pool_size,
            "max_overflow": settings.database_max_overflow,
            "pool_pre_ping": True,
        })
    # Create engine
    if database_url.startswith(("postgresql+asyncpg", "mysql+aiomysql")):
        # Async engine
        engine = create_async_engine(database_url, **engine_kwargs)
    else:
        # Sync engine
        engine = create_sqlmodel_engine(database_url, **engine_kwargs)
    logger.info(f"Database engine created for: {database_url.split('@')[-1] if '@' in database_url else database_url}")
    return engine


def get_database_engine():
    """Get the global database engine."""

    global _engine
    if _engine is None:
        settings = get_settings()
        _engine = create_database_engine(settings.database_url)
    return _engine


def get_async_database_engine():
    """Get the global async database engine."""

    global _async_engine
    if _async_engine is None:
        settings = get_settings()
        _async_engine = create_database_engine(
            settings.get_database_url(async_driver=True)
        )
    return _async_engine


def create_session_factory(engine=None) -> sessionmaker:
    """
    Create session factory for database sessions.
    Args:
    engine: Database engine (uses global if not provided)
    Returns:
    Session factory
    """

    if engine is None:
        engine = get_database_engine()
    return sessionmaker(
        bind=engine,
        class_=Session,
        expire_on_commit=False,
    )


def create_async_session_factory(engine=None) -> async_sessionmaker:
    """
    Create async session factory for database sessions.
    Args:
    engine: Async database engine (uses global if not provided)
    Returns:
    Async session factory
    """

    if engine is None:
        engine = get_async_database_engine()
    return async_sessionmaker(
        bind=engine,
        class_=AsyncSession,
        expire_on_commit=False,
    )


def get_session_factory() -> sessionmaker:
    """Get the global session factory."""

    global _session_factory
    if _session_factory is None:
        _session_factory = create_session_factory()
    return _session_factory


def get_async_session_factory() -> async_sessionmaker:
    """Get the global async session factory."""

    global _async_session_factory
    if _async_session_factory is None:
        _async_session_factory = create_async_session_factory()
    return _async_session_factory


def get_database_session() -> Generator[Session, None, None]:
    """
    Dependency for getting database session.
    Yields:
    Database session
    """

    session_factory = get_session_factory()
    session = session_factory()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"Database session error: {e}")
        raise
    finally:
        session.close()


@asynccontextmanager
async def get_async_database_session():
    """
    Async context manager for getting database session.
    Yields:
    Async database session
    """

    session_factory = get_async_session_factory()
    session = session_factory()
    try:
        yield session
        await session.commit()
    except Exception as e:
        await session.rollback()
        logger.error(f"Async database session error: {e}")
        raise
    finally:
        await session.close()


def create_database_tables(engine=None):
    """
    Create all database tables.
    Args:
    engine: Database engine (uses global if not provided)
    """

    if engine is None:
        engine = get_database_engine()
    logger.info("Creating database tables...")
    # Import all models to ensure they're registered with SQLModel
{% for domain in domains %}
    from .domain.{{ domain.name }}.entities import *  # noqa
{% endfor %}
    
    # Create tables
    SQLModel.metadata.create_all(engine)
    logger.info("Database tables created successfully")


async def create_async_database_tables(engine=None):
    """
    Create all database tables asynchronously.
    Args:
    engine: Async database engine (uses global if not provided)
    """

    if engine is None:
        engine = get_async_database_engine()
    logger.info("Creating database tables asynchronously...")
    # Import all models to ensure they're registered with SQLModel
{% for domain in domains %}
    from .domain.{{ domain.name }}.entities import *  # noqa
{% endfor %}
    
    # Create tables
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
    logger.info("Database tables created successfully")


def drop_database_tables(engine=None):
    """
    Drop all database tables.
    Args:
    engine: Database engine (uses global if not provided)
    """

    if engine is None:
        engine = get_database_engine()
    logger.warning("Dropping all database tables...")
    SQLModel.metadata.drop_all(engine)
    logger.warning("All database tables dropped")


async def drop_async_database_tables(engine=None):
    """
    Drop all database tables asynchronously.
    Args:
    engine: Async database engine (uses global if not provided)
    """

    if engine is None:
        engine = get_async_database_engine()
    logger.warning("Dropping all database tables asynchronously...")
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.drop_all)
    logger.warning("All database tables dropped")


def reset_database(engine=None):
    """
    Reset database by dropping and recreating all tables.
    Args:
    engine: Database engine (uses global if not provided)
    """

    logger.warning("Resetting database...")
    drop_database_tables(engine)
    create_database_tables(engine)
    logger.info("Database reset completed")


async def reset_async_database(engine=None):
    """
    Reset database asynchronously by dropping and recreating all tables.
    Args:
    engine: Async database engine (uses global if not provided)
    """

    logger.warning("Resetting database asynchronously...")
    await drop_async_database_tables(engine)
    await create_async_database_tables(engine)
    logger.info("Database reset completed")


def check_database_connection(engine=None) -> bool:
    """
    Check if database connection is working.
    Args:
    engine: Database engine (uses global if not provided)
    Returns:
    True if connection is working, False otherwise
    """

    if engine is None:
        engine = get_database_engine()
    try:
        with engine.connect() as connection:
            connection.execute(text("SELECT 1"))
        logger.info("Database connection check passed")
        return True
    except Exception as e:
        logger.error(f"Database connection check failed: {e}")
        return False


async def check_async_database_connection(engine=None) -> bool:
    """
    Check if async database connection is working.
    Args:
    engine: Async database engine (uses global if not provided)
    Returns:
    True if connection is working, False otherwise
    """

    if engine is None:
        engine = get_async_database_engine()
    try:
        async with engine.begin() as connection:
            await connection.execute(text("SELECT 1"))
        logger.info("Async database connection check passed")
        return True
    except Exception as e:
        logger.error(f"Async database connection check failed: {e}")
        return False


# Database initialization function for application startup
def initialize_database():
    """Initialize database on application startup."""
    settings = get_settings()
    # Check connection
    if not check_database_connection():
        raise RuntimeError("Failed to connect to database")
    # Create tables if they don't exist
    if settings.environment != "production" or settings.debug:
        create_database_tables()
    logger.info("Database initialization completed")


async def initialize_async_database():
    """Initialize async database on application startup."""
    settings = get_settings()
    # Check connection
    if not await check_async_database_connection():
        raise RuntimeError("Failed to connect to async database")
    # Create tables if they don't exist
    if settings.environment != "production" or settings.debug:
        await create_async_database_tables()
    logger.info("Async database initialization completed")
