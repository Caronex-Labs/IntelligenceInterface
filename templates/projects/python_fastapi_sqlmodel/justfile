# Python FastAPI SQLModel Template System - Essential Commands
# Minimal command interface for development and generation workflows

# Show available commands
default:
    @just --list

# Display help for all commands
help:
    @echo "Python FastAPI SQLModel Template System - Essential Commands"
    @echo ""
    @echo "Development Setup:"
    @echo "  setup          - Setup development environment with UV"
    @echo "  install        - Install dependencies and sync environment"
    @echo "  install-cli    - Install the CLI tool into your system"
    @echo ""
    @echo "Testing Commands:"
    @echo "  test           - Run all tests"
    @echo "  test-unit      - Run unit tests only"
    @echo "  test-integration - Run integration tests"
    @echo ""
    @echo "Code Quality:"
    @echo "  lint           - Run code linting with ruff"
    @echo "  lint-fix       - Auto-fix lint issues"
    @echo "  format         - Format code with black"
    @echo "  format-check   - Check code formatting"
    @echo ""
    @echo "Generation Commands:"
    @echo "  init NAME      - Initialize new project"
    @echo "  gen-core CONFIG - Generate core layer"
    @echo "  gen-all CONFIG - Generate all layers"
    @echo "  add-domain NAME - Add new domain"
    @echo ""
    @echo "Utilities:"
    @echo "  clean          - Clean build artifacts"
    @echo "  health         - System health check"
    @echo "  cli-help       - Show CLI usage"
    @echo ""
    @echo "Examples:"
    @echo "  just setup"
    @echo "  just init my-project"
    @echo "  just gen-core configs/user_domain.yaml"
    @echo "  just test"

# Development setup
setup:
    @echo "🚀 Setting up development environment..."
    @which uv > /dev/null || (echo "❌ UV is required. Install from: https://docs.astral.sh/uv/" && exit 1)
    uv sync
    @echo "✅ Setup complete!"

# Install dependencies
install:
    @echo "📦 Installing dependencies..."
    uv sync

# Install the CLI tool in your system
install-cli:
    @echo "📦 Installing CLI tool..."
    uv tool install . -e
    @echo "✅ CLI installed! Use: fastapi-sqlmodel-generator"

# Testing commands
test *args:
    @echo "🧪 Running all tests..."
    @if [ -d "tests" ] && [ "$(find tests -name "test_*.py" -o -name "*_test.py" | wc -l)" -gt 0 ]; then \
        uv run python -m pytest tests/ {{args}} -v; \
    else \
        echo "No test files found. Create test_*.py files in tests/ directory."; \
    fi

test-unit *args:
    @echo "🔬 Running unit tests..."
    @if [ -d "tests/unit" ]; then \
        uv run python -m pytest tests/unit/ {{args}} -v; \
    elif [ -d "tests" ] && [ "$(find tests -name "test_*.py" -o -name "*_test.py" | wc -l)" -gt 0 ]; then \
        echo "No unit tests directory found (tests/unit/). Running all tests."; \
        uv run python -m pytest tests/ {{args}} -v; \
    else \
        echo "No test files found. Create test_*.py files in tests/unit/ directory."; \
    fi

test-integration *args:
    @echo "🔗 Running integration tests..."
    @if [ -d "tests/integration" ]; then \
        uv run python -m pytest tests/integration/ {{args}} -v; \
    elif [ -d "tests" ] && [ "$(find tests -name "test_*.py" -o -name "*_test.py" | wc -l)" -gt 0 ]; then \
        echo "No integration tests directory found (tests/integration/). Running all tests."; \
        uv run python -m pytest tests/ {{args}} -v; \
    else \
        echo "No test files found. Create test_*.py files in tests/integration/ directory."; \
    fi

# Code quality
lint:
    @echo "🔍 Running linters..."
    @echo "Note: Some lint errors in generator/ code are expected and can be auto-fixed with 'just lint-fix'"
    -uv run ruff check generator/ tests/ scripts/ mcp_server.py test_auth_domain_fix.py

lint-fix:
    @echo "🔧 Auto-fixing lint issues..."
    uv run ruff check --fix generator/ tests/ scripts/ mcp_server.py test_auth_domain_fix.py

format:
    @echo "🎨 Formatting code..."
    uv run black --exclude "app/" generator/

format-check:
    @echo "🎨 Checking code formatting..."
    uv run black --check --exclude "app/" generator/

# Generation commands (using new CLI)
init name:
    @echo "🚀 Initializing project: {{name}}"
    uv run python -m generator.interface.cli.main init --name "{{name}}" --output ./{{name}}

gen-core config:
    @echo "⚙️ Generating core layer from: {{config}}"
    uv run python -m generator.interface.cli.main gen-core --config "{{config}}" --output .

gen-repository config:
    @echo "⚙️ Generating repository layer from: {{config}}"
    uv run python -m generator.interface.cli.main gen-repository --config "{{config}}" --output .

gen-usecase config:
    @echo "⚙️ Generating use case layer from: {{config}}"
    uv run python -m generator.interface.cli.main gen-usecase --config "{{config}}" --output .

gen-service config:
    @echo "⚙️ Generating service layer from: {{config}}"
    uv run python -m generator.interface.cli.main gen-service --config "{{config}}" --output .

gen-all config:
    @echo "⚙️ Generating all layers from: {{config}}"
    uv run python -m generator.interface.cli.main gen-all --config "{{config}}" --output .

add-domain name:
    @echo "📝 Adding domain: {{name}}"
    uv run python -m generator.interface.cli.main add-domain --name "{{name}}" --output .

validate config:
    @echo "🔍 Validating configuration: {{config}}"
    uv run python -m generator.interface.cli.main validate --config "{{config}}"

# CLI utilities
cli-help:
    @echo "📖 CLI Usage:"
    uv run python -m generator.interface.cli.main --help

cli-usage:
    @echo "📖 CLI Usage Examples:"
    uv run python -m generator.interface.cli.main usage

cli-schema:
    @echo "📖 Configuration Schemas:"
    uv run python -m generator.interface.cli.main schema

cli-workflow:
    @echo "📖 Complete Workflow Guide:"
    uv run python -m generator.interface.cli.main workflow

# Cleanup commands
clean:
    @echo "🧹 Cleaning build artifacts..."
    find . -type d -name "__pycache__" -delete 2>/dev/null || true
    find . -type d -name "*.egg-info" -delete 2>/dev/null || true
    find . -name "*.pyc" -delete 2>/dev/null || true
    find . -name "*.pyo" -delete 2>/dev/null || true
    rm -rf .pytest_cache/ 2>/dev/null || true
    rm -rf build/ dist/ 2>/dev/null || true
    @echo "✅ Cleanup complete"

# Health check
health:
    @echo "🏥 System health check..."
    @which uv > /dev/null && echo "✅ UV is installed" || (echo "❌ UV is not installed" && exit 1)
    @which python > /dev/null && echo "✅ Python is available" || echo "❌ Python is not available"
    uv run python -c "import yaml, jinja2, pydantic; print('✅ Core dependencies working')"
    uv run python -m pytest --collect-only tests/ > /dev/null 2>&1 && echo "✅ Tests discoverable" || echo "⚠️ Test discovery issues"
    @echo "💚 Health check complete"

# Development workflow shortcuts
dev-setup: setup install-cli
    @echo "🎉 Development environment ready!"

quick-check: lint test-unit
    @echo "✅ Quick development checks complete (format check skipped - run 'just format' to fix)"

# Version information
version:
    @echo "📋 Version information:"
    @echo "Python: $(python --version 2>&1)"
    @echo "UV: $(uv --version 2>&1)"
    @echo "Template system: FastAPI SQLModel Generator v0.1.0"