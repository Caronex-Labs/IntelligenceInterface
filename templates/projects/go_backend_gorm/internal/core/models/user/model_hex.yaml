# Configuration used to generate this model file
# Generated by: gohex engine
# Template: internal/core/models/{{DOMAIN}}/model.go.tmpl
# Domain: user
# Entity: User

layer: "model"
domain: "user"
entity: "User"

# Model configuration that produced this file
model:
  name: "User"
  description: "User represents a user in the database"
  package: "user"
  table_name: "users"
  
  # Database and ORM configuration
  orm: "gorm"
  database_type: "postgresql" # postgresql, mysql, sqlite
  soft_delete: false
  uuid_primary_key: true
  timestamps: true
  
  # Fields that were configured for this model
  fields:
    # Standard fields (automatically included)
    - name: "ID"
      type: "uuid.UUID"
      gorm_tags: "type:uuid;primaryKey"
      json_tags: "id"
      description: "Primary key identifier"
      primary_key: true
      standard: true
      
    - name: "CreatedAt"
      type: "time.Time"
      gorm_tags: "type:timestamp;default:now()"
      json_tags: "created_at"
      description: "Record creation timestamp"
      auto_managed: true
      standard: true
      
    - name: "UpdatedAt"
      type: "time.Time"
      gorm_tags: "type:timestamp;default:now()"
      json_tags: "updated_at"
      description: "Record update timestamp"
      auto_managed: true
      standard: true
      
    # Custom fields (from configuration)
    - name: "Email"
      type: "string"
      gorm_tags: "type:varchar(255);uniqueIndex;not null"
      json_tags: "email"
      description: "User email address"
      unique: true
      nullable: false
      max_length: 255
      
    - name: "FirstName"
      type: "string"
      gorm_tags: "type:varchar(100);not null"
      json_tags: "first_name"
      description: "User first name"
      nullable: false
      max_length: 100
      
    - name: "LastName"
      type: "string"
      gorm_tags: "type:varchar(100);not null"
      json_tags: "last_name"
      description: "User last name"
      nullable: false
      max_length: 100
      
    - name: "PasswordHash"
      type: "string"
      gorm_tags: "type:text;not null"
      json_tags: "-"
      description: "Encrypted password hash"
      exclude_from_json: true
      nullable: false
      sensitive: true
      
    - name: "IsActive"
      type: "bool"
      gorm_tags: "type:boolean;default:true"
      json_tags: "is_active"
      description: "User account active status"
      default: true
      
    - name: "ProfilePictureURL"
      type: "string"
      gorm_tags: "type:text"
      json_tags: "profile_picture_url,omitempty"
      description: "URL to user profile picture"
      nullable: true
      
    - name: "LastLoginAt"
      type: "*time.Time"
      gorm_tags: "type:timestamp"
      json_tags: "last_login_at,omitempty"
      description: "Last login timestamp"
      nullable: true

  # Model methods configuration
  methods:
    - name: "TableName"
      description: "Specifies the database table name"
      returns: "string"
      implementation: 'return "users"'
      gorm_method: true
      
    - name: "BeforeCreate"
      description: "GORM hook executed before record creation"
      returns: "error"
      hook_type: "before_create"
      gorm_hook: true
      uuid_generation: true
      implementation: |
        if e.ID == uuid.Nil {
          e.ID = uuid.New()
        }
        return nil
        
    # Custom methods (from configuration)
    - name: "BeforeUpdate"
      description: "GORM hook executed before record update"
      returns: "error"
      hook_type: "before_update"
      gorm_hook: true
      custom: true
      placeholder: true
      
    - name: "FullName"
      description: "Returns the user's full name"
      returns: "string"
      computed: true
      implementation: "return e.FirstName + \" \" + e.LastName"
      
    - name: "IsValidEmail"
      description: "Validates the email format"
      returns: "bool"
      validation: true
      placeholder: true

# Database schema configuration
database:
  table_name: "users"
  primary_key: "ID"
  indexes:
    - name: "idx_users_email"
      fields: ["Email"]
      unique: true
    - name: "idx_users_active"
      fields: ["IsActive"]
    - name: "idx_users_last_login"
      fields: ["LastLoginAt"]
      
  constraints:
    - name: "users_email_not_empty"
      type: "check"
      condition: "email <> ''"
    - name: "users_names_not_empty"
      type: "check"
      condition: "first_name <> '' AND last_name <> ''"

# GORM specific configuration
gorm:
  hooks:
    before_create: true
    before_update: false  # Can be enabled with custom implementation
    after_find: false
    before_delete: false
    after_create: false
    
  features:
    soft_delete: false
    auto_migrate: true
    foreign_keys: true
    
  tags:
    default_string_type: "varchar(255)"
    default_timestamp_type: "timestamp"
    json_tag_format: "snake_case"

# Validation configuration
validation:
  required_fields: ["Email", "FirstName", "LastName", "PasswordHash"]
  unique_fields: ["Email"]
  email_fields: ["Email"]
  min_lengths:
    FirstName: 2
    LastName: 2
    PasswordHash: 8
  max_lengths:
    Email: 255
    FirstName: 100
    LastName: 100

# Security configuration
security:
  sensitive_fields: ["PasswordHash"]
  exclude_from_logs: ["PasswordHash"]
  exclude_from_json: ["PasswordHash"]
  
# Relationships (for future extension)
relationships:
  has_many: []
  belongs_to: []
  many_to_many: []

# Template variables used during generation
template_vars:
  domain: "user"
  domain_snake: "user"
  entity: "User"
  entity_snake: "user"
  entities: "Users"
  entities_snake: "users"
  module: "go_backend_gorm"

# Generation metadata
generation:
  template_file: "internal/core/models/{{DOMAIN}}/model.go.tmpl"
  output_file: "internal/core/models/user/user.go"
  generated_at: "2024-12-20T11:00:00Z"
  generator_version: "1.0.0"
  preserve_custom_code: true

# Custom code regions (for code preservation)
custom_regions:
  - name: "custom_fields"
    marker: "// Add your fields here"
    description: "Add custom model fields with GORM and JSON tags"
    
  - name: "custom_methods"
    marker: "// @gohex:begin:custom:methods"
    description: "Add custom model methods and business logic"
    location: "after_standard_methods"
    
  - name: "custom_hooks"
    marker: "// @gohex:begin:custom:hooks"
    description: "Add custom GORM hooks for model lifecycle"
    location: "after_before_create"
    
  - name: "custom_validation"
    marker: "// @gohex:begin:custom:validation"
    description: "Add custom validation methods"
    location: "end_of_file"
