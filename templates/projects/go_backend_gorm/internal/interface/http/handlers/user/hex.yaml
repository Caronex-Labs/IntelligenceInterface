# Configuration used to generate this handler file
# Generated by: gohex engine
# Template: internal/interface/http/handlers/{{DOMAIN}}/handler.go.tmpl
# Domain: user
# Entity: User

layer: "handler"
domain: "user"
entity: "User"

# Handler configuration that produced this file
handler:
  name: "Handler"
  description: "Handler handles user requests"
  package: "user"
  
  # Dependencies injected into handler
  dependencies:
    - name: "userUseCase"
      type: "usecasePkg.IUserUseCase"
      source: "usecase_container"
      field_name: "User"
      description: "User use case for business logic"
      
    - name: "logger"
      type: "*utils.Logger"
      injection: "do.MustInvoke[*utils.Logger](injector)"
      description: "Logger for request logging and debugging"

  # HTTP route configuration
  routes:
    base_path: "/api/v1/users"
    
    # Standard CRUD endpoints generated
    endpoints:
      - path: "/api/v1/users"
        methods: ["GET", "POST"]
        handler_function: "handleUsers"
        description: "Handle user collection operations"
        operations:
          - method: "GET"
            operation: "list"
            use_case_method: "List"
            response_type: "array"
            supports_pagination: true
            supports_filtering: true
            default_limit: 10
            default_offset: 0
            
          - method: "POST"
            operation: "create"
            use_case_method: "Create"
            request_body: "entityPkg.User"
            response_type: "single"
            status_code: 201
            
      - path: "/api/v1/users/"
        methods: ["GET", "PUT", "DELETE"]
        handler_function: "handleUserByID"
        description: "Handle individual user operations"
        path_parameter: "id"
        parameter_type: "uuid.UUID"
        operations:
          - method: "GET"
            operation: "get_by_id"
            use_case_method: "GetByID"
            response_type: "single"
            
          - method: "PUT"
            operation: "update"
            use_case_method: "Update"
            request_body: "entityPkg.User"
            response_type: "single"
            id_mapping: "ensure_id_consistency"  # ID in URL overrides body
            
          - method: "DELETE"
            operation: "delete"
            use_case_method: "Delete"
            response_type: "none"
            status_code: 204

# Request/Response handling configuration
request_handling:
  content_type: "application/json"
  body_decoder: "json.NewDecoder"
  max_body_size: "1MB"  # Could be configurable
  
response_handling:
  content_type: "application/json"
  encoder: "json.NewEncoder"
  default_headers:
    - name: "Content-Type"
      value: "application/json"

# Error handling configuration
error_handling:
  validation_error_status: 400
  not_found_error_status: 404
  internal_error_status: 500
  method_not_allowed_status: 405
  
  error_responses:
    validation: "Invalid request body"
    not_found: "User not found"
    internal: "Internal server error"
    invalid_id: "Invalid user ID"

# Parameter parsing configuration
parameter_parsing:
  path_parameters:
    - name: "id"
      type: "uuid.UUID"
      parser: "uuid.Parse"
      position: "after_base_path"
      
  query_parameters:
    - name: "limit"
      type: "int"
      default: 10
      validation: "positive_integer"
      
    - name: "offset"
      type: "int"
      default: 0
      validation: "non_negative_integer"
      
    # Placeholder for additional query parameters
    # Would be added in configuration:
    # - name: "is_active"
    #   type: "bool"
    #   optional: true
    # - name: "search"
    #   type: "string"
    #   optional: true

# Logging configuration
logging:
  enabled: true
  request_logging: true
  error_logging: true
  performance_timing: true
  
  log_methods:
    info: "h.logger.Info"
    error: "h.logger.LogError"
    request: "h.logger.LogRequest"

# Interface compliance
interface_compliance:
  implements: "common.IHandler"
  required_methods:
    - "RegisterRoutes"

# Dependency resolution configuration
dependency_resolution:
  container_type: "*usecase.UseCases"
  field_lookup: "usecase.GetField"
  error_handling: "type_assertion_check"
  reflection_based: true

# Template variables used during generation
template_vars:
  domain: "user"
  domain_snake: "user"
  entity: "User"
  entity_snake: "user"
  entities: "Users"
  entities_snake: "users"
  module: "go_backend_gorm"

# Generation metadata
generation:
  template_file: "internal/interface/http/handlers/{{DOMAIN}}/handler.go.tmpl"
  output_file: "internal/interface/http/handlers/user/user.go"
  generated_at: "2024-12-20T10:30:00Z"
  generator_version: "1.0.0"
  preserve_custom_code: true

# Custom code regions (for code preservation)
custom_regions:
  - name: "query_parameter_parsing"
    marker: "// TODO: Parse query parameters for filtering"
    description: "Add custom query parameter parsing logic"
    location: "handleUsers_method"
    
  - name: "custom_validation"
    marker: "// Add custom validation here"
    description: "Add request validation before use case calls"
    location: "before_use_case_calls"
    
  - name: "custom_endpoints"
    marker: "// Add custom endpoints here"
    description: "Add domain-specific HTTP endpoints"
    location: "after_standard_routes"
    
  - name: "custom_middleware"
    marker: "// Add custom middleware here"
    description: "Add request-specific middleware or interceptors"
    location: "route_registration"
