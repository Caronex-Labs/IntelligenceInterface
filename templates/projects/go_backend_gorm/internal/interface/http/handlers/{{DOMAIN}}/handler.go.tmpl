package {{.DomainSnake}}

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/google/uuid"
	"github.com/samber/do"

	entityPkg "go_backend_gorm/internal/core/entity/{{.DomainSnake}}"
	"go_backend_gorm/internal/usecase"
	usecasePkg "go_backend_gorm/internal/usecase/{{.DomainSnake}}"
	"go_backend_gorm/internal/utils"
	"go_backend_gorm/internal/interface/http/common"
)

// Handler handles {{.DomainSnake}} requests
type Handler struct {
	{{.EntitySnake}}UseCase usecasePkg.I{{.Entity}}UseCase
	logger        *utils.Logger
}

// Ensure Handler implements the IHandler interface
var _ common.IHandler = (*Handler)(nil)

// NewHandler creates a new {{.DomainSnake}} handler
func NewHandler(injector *do.Injector) (*Handler, error) {
	// Get dependencies from injector
	useCases, err := do.Invoke[*usecase.UseCases](injector)
	if err != nil {
		return nil, err
	}

	// Get the {{.DomainSnake}} use case from the use cases container
	useCaseField, ok := usecase.GetField(useCases, "{{.Entity}}")
	if !ok {
		return nil, fmt.Errorf("failed to get {{.DomainSnake}} use case from container")
	}
	
	{{.EntitySnake}}UseCase, ok := useCaseField.(usecasePkg.I{{.Entity}}UseCase)
	if !ok {
		return nil, fmt.Errorf("failed to cast {{.DomainSnake}} use case to correct type")
	}

	log := do.MustInvoke[*utils.Logger](injector)

	return &Handler{
		{{.EntitySnake}}UseCase: {{.EntitySnake}}UseCase,
		logger:        log,
	}, nil
}

// RegisterRoutes registers all routes for the {{.DomainSnake}} handler
func (h *Handler) RegisterRoutes(mux *http.ServeMux) {
	h.logger.Info("registering {{.DomainSnake}} routes")
	
	// Register routes
	mux.HandleFunc("/api/v1/{{.EntitiesSnake}}", h.handle{{.Entities}})
	mux.HandleFunc("/api/v1/{{.EntitiesSnake}}/", h.handle{{.Entity}}ByID)
}

// handle{{.Entities}} handles GET and POST requests for {{.EntitiesSnake}}
func (h *Handler) handle{{.Entities}}(w http.ResponseWriter, r *http.Request) {
	start := time.Now()
	ctx := r.Context()

	switch r.Method {
	case http.MethodGet:
		// Handle GET request (list {{.EntitiesSnake}})
		// Parse query parameters for filtering and pagination
		query := r.URL.Query()
		limit := 10 // Default limit
		offset := 0 // Default offset

		// TODO: Parse query parameters for filtering
		// Example:
		// if limitStr := query.Get("limit"); limitStr != "" {
		//     if limitVal, err := strconv.Atoi(limitStr); err == nil && limitVal > 0 {
		//         limit = limitVal
		//     }
		// }
		// if offsetStr := query.Get("offset"); offsetStr != "" {
		//     if offsetVal, err := strconv.Atoi(offsetStr); err == nil && offsetVal >= 0 {
		//         offset = offsetVal
		//     }
		// }
		_ = query // Silence unused variable warning until query parsing is implemented

		// Get {{.EntitiesSnake}} from use case
		{{.EntitiesSnake}}, err := h.{{.EntitySnake}}UseCase.List(ctx, nil, limit, offset)
		if err != nil {
			h.logger.LogError(ctx, err, "failed to list {{.EntitiesSnake}}")
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

		// Return {{.EntitiesSnake}} as JSON
		w.Header().Set("Content-Type", "application/json")
		err = json.NewEncoder(w).Encode({{.EntitiesSnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to encode {{.EntitiesSnake}} to JSON")
			return
		}

	case http.MethodPost:
		// Handle POST request (create {{.DomainSnake}})
		var {{.EntitySnake}} entityPkg.{{.Entity}}
		err := json.NewDecoder(r.Body).Decode(&{{.EntitySnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to decode request body")
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		// Create {{.DomainSnake}} using use case
		err = h.{{.EntitySnake}}UseCase.Create(ctx, &{{.EntitySnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to create {{.DomainSnake}}")
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

		// Return created {{.DomainSnake}} as JSON
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		err = json.NewEncoder(w).Encode({{.EntitySnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to encode {{.DomainSnake}} to JSON")
			return
		}

	default:
		w.WriteHeader(http.StatusMethodNotAllowed)
	}

	// Log the request
	duration := time.Since(start)
	h.logger.LogRequest(ctx, r.Method, r.URL.Path, http.StatusOK, duration)
}

// handle{{.Entity}}ByID handles GET, PUT, and DELETE requests for a specific {{.DomainSnake}}
func (h *Handler) handle{{.Entity}}ByID(w http.ResponseWriter, r *http.Request) {
	start := time.Now()
	ctx := r.Context()

	// Extract ID from URL
	idStr := r.URL.Path[len("/api/v1/{{.EntitiesSnake}}/"):]
	id, err := uuid.Parse(idStr)
	if err != nil {
		h.logger.LogError(ctx, err, "invalid {{.DomainSnake}} ID")
		http.Error(w, "Invalid {{.DomainSnake}} ID", http.StatusBadRequest)
		return
	}

	switch r.Method {
	case http.MethodGet:
		// Handle GET request (get {{.DomainSnake}} by ID)
		{{.EntitySnake}}, err := h.{{.EntitySnake}}UseCase.GetByID(ctx, id)
		if err != nil {
			h.logger.LogError(ctx, err, "failed to get {{.DomainSnake}}")
			http.Error(w, "{{.Entity}} not found", http.StatusNotFound)
			return
		}

		// Return {{.DomainSnake}} as JSON
		w.Header().Set("Content-Type", "application/json")
		err = json.NewEncoder(w).Encode({{.EntitySnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to encode {{.DomainSnake}} to JSON")
			return
		}

	case http.MethodPut:
		// Handle PUT request (update {{.DomainSnake}})
		var {{.EntitySnake}} entityPkg.{{.Entity}}
		err := json.NewDecoder(r.Body).Decode(&{{.EntitySnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to decode request body")
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		// Ensure ID in URL matches ID in body
		{{.EntitySnake}}.ID = id

		// Update {{.DomainSnake}} using use case
		err = h.{{.EntitySnake}}UseCase.Update(ctx, &{{.EntitySnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to update {{.DomainSnake}}")
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

		// Return updated {{.DomainSnake}} as JSON
		w.Header().Set("Content-Type", "application/json")
		err = json.NewEncoder(w).Encode({{.EntitySnake}})
		if err != nil {
			h.logger.LogError(ctx, err, "failed to encode {{.DomainSnake}} to JSON")
			return
		}

	case http.MethodDelete:
		// Handle DELETE request (delete {{.DomainSnake}})
		err := h.{{.EntitySnake}}UseCase.Delete(ctx, id)
		if err != nil {
			h.logger.LogError(ctx, err, "failed to delete {{.DomainSnake}}")
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

		// Return success response
		w.WriteHeader(http.StatusNoContent)

	default:
		w.WriteHeader(http.StatusMethodNotAllowed)
	}

	// Log the request
	duration := time.Since(start)
	h.logger.LogRequest(ctx, r.Method, r.URL.Path, http.StatusOK, duration)
}
