# Configuration used to generate this repository registration file
# Generated by: gohex engine
# Template: internal/repository/{{DOMAIN}}/repositories.go.tmpl
# Domain: user
# Entity: User

layer: "repository_registration"
domain: "user"
entity: "User"

# Repository registration configuration
registration:
  function_name: "RegisterUserRepository"
  description: "Registers the user repository in the dependency injection container"
  package: "user"
  
  # DI registration steps
  steps:
    - type: "provide_constructor"
      description: "Register the repository implementation"
      constructor: "NewUserRepository"
      interface: "IUserRepository"
      
    - type: "dynamic_field_registration"
      description: "Add repository to central Repositories struct"
      callback_name: "register_user_repository"
      field_name: "User"
      container_type: "*repository.Repositories"
      method: "repository.AddField"

# Dependency injection configuration
dependency_injection:
  container: "samber/do"
  registration_pattern: "callback_based"
  supports_dynamic_fields: true
  error_handling: "panic_on_error"  # Could be "return_error"

# Dynamic field management
dynamic_fields:
  enabled: true
  container_struct: "repository.Repositories"
  field_name: "User"  # Field added to container
  field_type: "IUserRepository"
  add_method: "repository.AddField"
  reflection_based: true

# Template variables used during generation
template_vars:
  domain: "user"
  domain_snake: "user"
  entity: "User"
  entity_snake: "user"
  entities: "Users"
  entities_snake: "users"
  module: "go_backend_gorm"

# Generation metadata
generation:
  template_file: "internal/repository/{{DOMAIN}}/repositories.go.tmpl"
  output_file: "internal/repository/user/repositories.go"
  generated_at: "2024-12-20T10:30:00Z"
  generator_version: "1.0.0"
  preserve_custom_code: false  # Registration files typically don't need custom code

# Custom code regions (for code preservation)
custom_regions:
  - name: "custom_registration_logic"
    marker: "// Add custom registration logic here"
    description: "Add any custom dependency injection logic"
    location: "after_standard_registration"
