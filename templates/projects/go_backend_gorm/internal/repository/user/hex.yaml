# Configuration used to generate this repository file
# Generated by: gohex engine
# Template: internal/repository/{{DOMAIN}}/repository.go.tmpl
# Domain: user
# Entity: User

layer: "repository"
domain: "user"
entity: "User"

# Repository configuration that produced this file
repository:
  name: "UserRepository"
  interface_name: "IUserRepository"
  description: "User data access layer"
  package: "user"
  
  # Dependencies injected into repository
  dependencies:
    - name: "db"
      type: "*postgres.DB"
      injection: "do.MustInvoke[*postgres.DB](injector)"
      
    - name: "logger"
      type: "*utils.Logger"
      injection: "do.MustInvoke[*utils.Logger](injector)"

  # Standard CRUD methods generated automatically
  standard_methods:
    - name: "Create"
      description: "Create creates a new user"
      parameters:
        - name: "ctx"
          type: "context.Context"
        - name: "user"
          type: "*entityPkg.User"
      returns: ["error"]
      operation: "create"
      
    - name: "GetByID"
      description: "GetByID retrieves a user by ID"
      parameters:
        - name: "ctx"
          type: "context.Context"
        - name: "id"
          type: "uuid.UUID"
      returns: ["*entityPkg.User", "error"]
      operation: "read_by_id"
      query: "id = ?"
      
    - name: "List"
      description: "List retrieves a list of users with optional filtering"
      parameters:
        - name: "ctx"
          type: "context.Context"
        - name: "filters"
          type: "map[string]interface{}"
        - name: "limit"
          type: "int"
        - name: "offset"
          type: "int"
      returns: ["[]*entityPkg.User", "error"]
      operation: "list"
      supports_filtering: true
      supports_pagination: true
      
    - name: "Update"
      description: "Update updates an existing user"
      parameters:
        - name: "ctx"
          type: "context.Context"
        - name: "user"
          type: "*entityPkg.User"
      returns: ["error"]
      operation: "update"
      
    - name: "Delete"
      description: "Delete deletes a user by ID"
      parameters:
        - name: "ctx"
          type: "context.Context"
        - name: "id"
          type: "uuid.UUID"
      returns: ["error"]
      operation: "delete"
      delete_type: "hard"  # Could be "soft" for logical deletion

  # Custom methods would be added here in configuration
  # Example of what could be configured:
  # custom_methods:
  #   - name: "GetByEmail"
  #     description: "Get user by email address"
  #     parameters:
  #       - name: "ctx"
  #         type: "context.Context"
  #       - name: "email"
  #         type: "string"
  #     returns: ["*entityPkg.User", "error"]
  #     query: "email = ?"

# Data conversion configuration
conversion:
  entity_to_model: "user.ToUserModel()"
  model_to_entity: "entityPkg.FromUserModel(&model)"
  handles_collections: true  # Converts arrays of models to entities

# Error handling configuration
error_handling:
  not_found_error: "gorm.ErrRecordNotFound"
  not_found_message: "user not found"
  generic_error_handling: true
  logging: true

# Database operations configuration
database:
  orm: "gorm"
  context_support: true
  transaction_support: false  # Could be enabled
  soft_delete_support: false  # Could be enabled with DeletedAt field

# Template variables used during generation
template_vars:
  domain: "user"
  domain_snake: "user"
  entity: "User"
  entity_snake: "user"
  entities: "Users"
  entities_snake: "users"
  module: "go_backend_gorm"

# Generation metadata
generation:
  template_file: "internal/repository/{{DOMAIN}}/repository.go.tmpl"
  output_file: "internal/repository/user/user_repository.go"
  generated_at: "2024-12-20T10:30:00Z"
  generator_version: "1.0.0"
  preserve_custom_code: true

# Custom code regions (for code preservation)
custom_regions:
  - name: "custom_methods"
    marker: "// Add custom repository methods here"
    description: "Add custom query methods specific to user domain"
    location: "after_standard_methods"
    
  - name: "custom_imports"
    marker: "// Add custom imports here"
    description: "Add additional imports for custom functionality"
    location: "import_section"
